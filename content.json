{"meta":{"title":"ilz Blog","subtitle":"coder","description":"李智的个人博客","author":"李智","url":"https://li-z.github.io"},"pages":[{"title":"","date":"2017-02-19T11:37:04.405Z","updated":"2017-02-19T11:37:04.352Z","comments":false,"path":"categories/index.html","permalink":"https://li-z.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-02-19T11:36:30.532Z","updated":"2017-02-19T11:36:30.449Z","comments":false,"path":"tags/index.html","permalink":"https://li-z.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"BFC布局 学习总结","slug":"BFC布局-学习总结","date":"2017-02-20T13:38:49.000Z","updated":"2017-02-20T14:04:13.369Z","comments":true,"path":"2017/02/20/BFC布局-学习总结/","link":"","permalink":"https://li-z.github.io/2017/02/20/BFC布局-学习总结/","excerpt":"","text":"一. w3c规范中的BFC定义：“浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-blocks, table-cells, 和 table-captions），以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。 在BFC中，盒子从顶端开始垂直地一个接一个地排列，两个盒子之间的垂直的间隙是由他们的margin 值所决定的。在一个BFC中，两个相邻的块级盒子的垂直外边距会产生折叠。 在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。 也就是说BFC中的元素的布局是不受外界的影响（我们往往利用这个特性来消除浮动元素对其非浮动的兄弟元素和其子元素带来的影响）。并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。 由这段定义，我们可以得出： 1. 哪些元素会生成BFC： 根元素(整个页面就是一个大的BFC)； float为 left | right； overflow为 hidden | auto | scroll； display为 inline-block | table-cell | table-caption | flex | inline-flex； position为 absolute | fixed；2. BFC的布局规则： 每一个BFC盒子会在垂直方向一个接一个地排列； 两个BFC盒子之间的垂直的间隙是由他们的margin 值所决定的。属于同一个BFC的两个相邻盒子的垂直方向的margin会重叠； 每一个BFC盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）； 4.计算BFC的高度时，浮动元素也参与计算； 不与外部浮动元素重叠； BFC就是页面上的一个隔离的独立容器，容器里面的子元素与容器外部元素不会相互影响；二. BFC的应用实例 1. 自适应两栏布局2. 清除内部浮动3. 防止垂直margin重叠在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。 折叠的结果： 两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值； 两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值； 两个外边距一正一负时，折叠结果是两者的相加的和； 产生折叠的必备条件： margin必须是邻接的，没有padding和border将他们分隔开； 必须是处于常规文档流（非float和绝对定位）的块级元素，并且处于同一个BFC当中； 产生折叠的常见情况： 元素的margin-top与其第一个常规文档流的子元素的margin-top； 元素的margin-bottom与其下一个常规文档流的兄弟元素的margin-top； height为auto的元素的margin-bottom与其最后一个常规文档流的子元素的margin-bottom； 高度为0且不包含常规文档流的子元素，并且自身没有建立新的BFC的元素的margin-top和margin-bottom； 浮动和绝对定位不与任何元素产生 margin 折叠：原因：浮动元素和绝对定位元素不与其他盒子产生外边距折叠是因为元素会脱离当前的文档流，违反了上面所述的两个margin是邻接的条件同时，又因为浮动和绝对定位会使元素为它的内容创建新的BFC，因此该元素和子元素所处的BFC是不相同的，因此也不会产生margin的折叠； 因此可以通过使元素成为BFC而避免margin折叠。BFC提供了一个独立布局的环境，每个BFC都遵守同一套布局规则。例如，在同一个BFC内，盒子会一个挨着一个的排，相邻盒子的间距是由margin决定且垂直方向的margin会重叠。而float和clear float也只对同一个BFC内的元素有效； 总结其实以上的几个例子都体现了BFC布局规则第六条： BFC就是页面上的一个隔离的独立容器，容器里面的子元素与容器外部元素不会相互影响。因此， 当BFC外部存在浮动时，外部元素不会影响BFC内部的布局，BFC会通过变窄，而不与浮动有重叠；同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度和margin值，因此可以避免margin重叠和闭合浮动。","categories":[],"tags":[{"name":"布局","slug":"布局","permalink":"https://li-z.github.io/tags/布局/"}]},{"title":"three","slug":"three","date":"2017-02-20T12:30:48.000Z","updated":"2017-02-20T12:31:06.481Z","comments":true,"path":"2017/02/20/three/","link":"","permalink":"https://li-z.github.io/2017/02/20/three/","excerpt":"","text":"","categories":[],"tags":[{"name":"js","slug":"js","permalink":"https://li-z.github.io/tags/js/"}]},{"title":"two","slug":"two","date":"2017-02-20T12:28:21.000Z","updated":"2017-02-20T12:28:21.348Z","comments":true,"path":"2017/02/20/two/","link":"","permalink":"https://li-z.github.io/2017/02/20/two/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"first","slug":"first-1","date":"2017-02-20T12:00:13.000Z","updated":"2017-02-20T12:00:13.916Z","comments":true,"path":"2017/02/20/first-1/","link":"","permalink":"https://li-z.github.io/2017/02/20/first-1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"first","slug":"first","date":"2017-02-20T11:50:44.000Z","updated":"2017-02-20T13:35:13.437Z","comments":true,"path":"2017/02/20/first/","link":"","permalink":"https://li-z.github.io/2017/02/20/first/","excerpt":"","text":"1[rectangle setX: 10 y: 10 width: 20 height: 20]; Array.map1array.map(callback[, thisArg]) _.compactUnderscore.js12_.compact([0, 1, false, 2, &apos;&apos;, 3]);=&gt; [1, 2, 3]","categories":[],"tags":[{"name":"js","slug":"js","permalink":"https://li-z.github.io/tags/js/"}]},{"title":"My Gallery","slug":"My-Gallery","date":"2017-02-20T11:37:24.000Z","updated":"2017-02-20T11:37:24.807Z","comments":true,"path":"2017/02/20/My-Gallery/","link":"","permalink":"https://li-z.github.io/2017/02/20/My-Gallery/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-02-19T08:42:52.921Z","updated":"2017-02-19T08:42:52.921Z","comments":true,"path":"2017/02/19/hello-world/","link":"","permalink":"https://li-z.github.io/2017/02/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}