{"meta":{"title":"ilz Blog","subtitle":"coder","description":"李智的个人博客","author":"李智","url":"https://li-z.github.io"},"pages":[{"title":"tags","date":"2017-02-22T08:56:55.000Z","updated":"2017-02-22T08:57:42.748Z","comments":true,"path":"tags/index.html","permalink":"https://li-z.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-02-22T08:58:12.000Z","updated":"2017-02-22T08:58:29.119Z","comments":true,"path":"categories/index.html","permalink":"https://li-z.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"JavaScript中实现继承的各种姿势","slug":"JavaScript中实现继承的各种姿势","date":"2017-02-21T10:57:53.000Z","updated":"2017-02-22T12:33:57.709Z","comments":true,"path":"2017/02/21/JavaScript中实现继承的各种姿势/","link":"","permalink":"https://li-z.github.io/2017/02/21/JavaScript中实现继承的各种姿势/","excerpt":"","text":"JavaScript 的继承是实现继承,而没有 Java 中的接口继承.这是因为JavaScript 中函数没有签名,而实现继承依靠的是原型链来实现的. 一.原型链继承可以利用原型让一个引用类型继承另一个引用类型的属性和方法;由于每个构造函数都有一个原型对象,原型对象都包含一个指向构造函数的指针,而实例都包含一个指向原型对象的指针. 123456789101112function SuperType() &#123; this.type = 'super';&#125;SuperType.prototype.getType() &#123; return this.type;&#125;function SubType() &#123; this.type = 'sub';&#125;SubType.prototype = new SuperType();var instance = new SubType();console.log(instance.getType()); // \"sub\" 注意: 子类型有时候需要重写超类型中的某个方法,或者需要添加超类型中不存在的某个方法.但不管怎样,给原型添加方法的代码一定要放在替换原型的语句之后. 在通过原型链实现继承时,不能使用对象字面量创建原型方法.因为这样做就会重写原型链. 不足: 在通过原型链实现继承时,原型实际上会变成另一个类型的实例.于是,原先的实例属性,也就成了现在的原型属性.而包含引用类型值的原型属性会被所有实例共享. 没有办法在不影响所有对象实例的情况下,给超类型的构造函数传递参数. 借用构造函数在子类型构造函数的内部调用超类型构造函数,利用apply()或call(),可以在将来创建对象实例的时候执行构造函数.123456789101112131415function SuperType(name)&#123; this.name = name; this.property = true; this.sayName = function()&#123; console.log(this.name); &#125; &#125;function SubType()&#123; //继承了SuperType SuperType.call(this,\"lz\"); //为了确保SuperType构造函数不会重写子类型的属性.可以在调用超类型构造函数后，再添加应该在子类型中定义的属性 this.age = 22;&#125;var instance = new SubType();console.log(instance); 不足 方法都在构造函数中定义，因此函数复用就无从谈起了. 在超类型的原型中定义的方法,对子类型而言也是不可见的,结果所有类型都只能使用构造函数模式. 组合继承类比使用构造函数模式定义类型时的解决方法（组合构造函数模式与原型模式,继承时的解决方法也类似),即组合原型链继承和借用构造函数,属性由借用构造函数的方式继承,方法由原型链继承.1234567891011121314151617181920212223242526function SuperType(name)&#123; this.name = name; this.colors = [\"red\",\"green\"]; &#125; SuperType.prototype.sayName = function () &#123; console.log(this.name); &#125;; function SubType(name,age)&#123; //继承属性 SuperType.call(this,name); this.age = age; &#125; //继承方法 SubType.prototype = new SuperType(); SubType.prototype.constructor = SubType; SubType.prototype.sayAge = function () &#123; console.log(this.age); &#125;; var instance1 = new SubType(\"lz\", 18); instance1.colors.push(\"black\"); var instance2 = new SubType('zl',81); instance2.colors.push('blue'); console.log(instance1.colors); console.log(instance2.colors); 组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点 原型式继承原型式继承没有使用严格意义上的构造函数,而是借助原型,基于已有的对象创建新对象,同时还无需创建自定义类型,于是,可以借助这个函数: 12345function object(o)&#123; function F()&#123;&#125; F.prototype = o; return new F(); &#125; 在 object()函数内部,先创建了一个临时性的构造函数,然后将传入的对象作为这个构造函数的原型,最后返回了这个临时类型的一个新实例.从本质上讲, object()对传入其中的对象执行了一次浅复制. 12345678910111213var person = &#123; name: \"LZ\", friends: [\"aa\",\"bb\",\"cc\"] &#125;; var lz = object(person); var zl = object(person); lz.friends.push(\"zz\"); lz.name = \"lz\"; zl.friends.push(\"ee\"); zl.name = \"zl\"; console.log(person.friends);//[\"aa\", \"bb\", \"cc\", \"zz\", \"ee\"] console.log(person.name);//LZ console.log(lz); //F &#123;friends: Array[1], name: \"lz\"&#125; 如果想使用这种原型式继承,必须先有一个基础对象.可以把它传递给object(),然后根据具体得到的对象加以修改即可. 在这个例子中,把person传入object函数,然后该函数返回一个新对象,这个新对象将 person 作为原型,所以它的原型中就包含一个基本类型值属性和一个引用类型值属性.这意味着 person.friends 不仅属于 person 所有,而且也会被 anotherPerson 以及 yetAnotherPerson 共享.实际上,这就相当于又创建了 person 对象的两个副本. ECMAScript 5 通过新增 Object.create()方法规范化了原型式继承,这个方法接收两个参数,在传入一个参数的情况下, Object.create()与 object()方法的行为相同. Object.create()方法的第二个参数与Object.defineProperties()方法的第二个参数格式相同：每个属性都是通过自己的描述符定义的。以这种方式指定的任何属性都会覆盖原型对象上的同名属性.例如:","categories":[{"name":"学习总结","slug":"学习总结","permalink":"https://li-z.github.io/categories/学习总结/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://li-z.github.io/tags/JavaScript/"}]},{"title":"BFC布局 学习总结","slug":"BFC布局-学习总结","date":"2017-02-20T13:38:49.000Z","updated":"2017-02-22T08:16:16.399Z","comments":true,"path":"2017/02/20/BFC布局-学习总结/","link":"","permalink":"https://li-z.github.io/2017/02/20/BFC布局-学习总结/","excerpt":"","text":"一. w3c规范中的BFC定义：“浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-blocks, table-cells, 和 table-captions），以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。 在BFC中，盒子从顶端开始垂直地一个接一个地排列，两个盒子之间的垂直的间隙是由他们的margin 值所决定的。在一个BFC中，两个相邻的块级盒子的垂直外边距会产生折叠。 在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。 也就是说BFC中的元素的布局是不受外界的影响（我们往往利用这个特性来消除浮动元素对其非浮动的兄弟元素和其子元素带来的影响）。并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。 由这段定义，我们可以得出： 1. 哪些元素会生成BFC： 根元素(整个页面就是一个大的BFC)； float为 left | right； overflow为 hidden | auto | scroll； display为 inline-block | table-cell | table-caption | flex | inline-flex； position为 absolute | fixed；2. BFC的布局规则： 每一个BFC盒子会在垂直方向一个接一个地排列； 两个BFC盒子之间的垂直的间隙是由他们的margin 值所决定的。属于同一个BFC的两个相邻盒子的垂直方向的margin会重叠； 每一个BFC盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）； 4.计算BFC的高度时，浮动元素也参与计算； 不与外部浮动元素重叠； BFC就是页面上的一个隔离的独立容器，容器里面的子元素与容器外部元素不会相互影响；二. BFC的应用实例 1. 自适应两栏布局2. 清除内部浮动3. 防止垂直margin重叠在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。 折叠的结果： 两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值； 两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值； 两个外边距一正一负时，折叠结果是两者的相加的和； 产生折叠的必备条件： margin必须是邻接的，没有padding和border将他们分隔开； 必须是处于常规文档流（非float和绝对定位）的块级元素，并且处于同一个BFC当中； 产生折叠的常见情况： 元素的margin-top与其第一个常规文档流的子元素的margin-top； 元素的margin-bottom与其下一个常规文档流的兄弟元素的margin-top； height为auto的元素的margin-bottom与其最后一个常规文档流的子元素的margin-bottom； 高度为0且不包含常规文档流的子元素，并且自身没有建立新的BFC的元素的margin-top和margin-bottom； 浮动和绝对定位不与任何元素产生 margin 折叠：原因：浮动元素和绝对定位元素不与其他盒子产生外边距折叠是因为元素会脱离当前的文档流，违反了上面所述的两个margin是邻接的条件同时，又因为浮动和绝对定位会使元素为它的内容创建新的BFC，因此该元素和子元素所处的BFC是不相同的，因此也不会产生margin的折叠； 因此可以通过使元素成为BFC而避免margin折叠。BFC提供了一个独立布局的环境，每个BFC都遵守同一套布局规则。例如，在同一个BFC内，盒子会一个挨着一个的排，相邻盒子的间距是由margin决定且垂直方向的margin会重叠。而float和clear float也只对同一个BFC内的元素有效； 总结其实以上的几个例子都体现了BFC布局规则第六条： BFC就是页面上的一个隔离的独立容器，容器里面的子元素与容器外部元素不会相互影响。因此， 当BFC外部存在浮动时，外部元素不会影响BFC内部的布局，BFC会通过变窄，而不与浮动有重叠；同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度和margin值，因此可以避免margin重叠和闭合浮动。","categories":[{"name":"学习总结","slug":"学习总结","permalink":"https://li-z.github.io/categories/学习总结/"}],"tags":[{"name":"布局","slug":"布局","permalink":"https://li-z.github.io/tags/布局/"}]}]}